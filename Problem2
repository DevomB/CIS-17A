#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <vector>

using namespace std;

struct InventoryItem {
    string description;
    int quantity;
    double wholesaleCost;
    double retailCost;
    string dateAdded;
};

void addRecord(InventoryItem* inventory, int& size, const string& filename);
void displayRecords(const string& filename);
void changeRecord(InventoryItem* inventory, int size, const string& filename);
bool validateDate(const string& date);

int main() {
    const string filename = "inventory.txt";
    InventoryItem inventory[100];
    int size = 0;
    char choice = '0';

    while (choice != '4') {
        cout << "\n" << "Inventory Menu:" << endl;
        cout << "1. Add new record" << endl
        << "2. Display all records" << endl
        << "3. Change a record" << endl
        << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case '1':
                addRecord(inventory, size, filename);
                break;
            case '2':
                displayRecords(filename);
                break;
            case '3':
                changeRecord(inventory, size, filename);
                break;
            case '4':
                cout << "Exiting program." << endl;
                break;
            default:
                cout << "Invalid choice. Try again." << endl;
        }
    }

    return 0;
}

void addRecord(InventoryItem* inventory, int& size, const string& filename) {

    InventoryItem item;
    cout << "Enter item description: ";
    cin.ignore();
    getline(cin, item.description);

    cout << "Enter quantity on hand (>= 0): ";
    cin >> item.quantity;
    if (item.quantity < 0) {
        cout << "Invalid quantity." << endl;
        return;
    }

    cout << "Enter wholesale cost (>= 0): ";
    cin >> item.wholesaleCost;
    if (item.wholesaleCost < 0) {
        cout << "Invalid wholesale cost." << endl;
        return;
    }

    cout << "Enter retail cost (>= 0): ";
    cin >> item.retailCost;
    if (item.retailCost < 0) {
        cout << "Invalid retail cost." << endl;
        return;
    }

    cout << "Enter date added to inventory (MM-DD-YYYY): ";
    cin >> item.dateAdded;
    if (!validateDate(item.dateAdded)) {
        cout << "Invalid date format." << endl;
        return;
    }

    inventory[size++] = item;

    ofstream file(filename, ios::app);
    if (file.is_open()) {
        file << item.description << "|" << item.quantity << "|" << item.wholesaleCost << "|" << item.retailCost << "|" << item.dateAdded << endl;
        file.close();
    }

}

void displayRecords(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cout << "Error opening file." << endl;
        return;
    }

    string line;

    while (getline(file, line)) {
        cout << "\n" << line << endl;
    }
    file.close();
}

void changeRecord(InventoryItem* inventory, int size, const string& filename) {

    ifstream inFile(filename);
    if (!inFile.is_open()) {
        cout << "Error opening file." << endl;
        return;
    }

    vector<string> fileLines;
    string line;

    while (getline(inFile, line)) {
        fileLines.push_back(line);
    }

    inFile.close();

    displayRecords(filename);

    int recordIndex;
    cout << "Enter the record number you would like to change (Starting from 1): ";
    cin >> recordIndex;

    if (recordIndex < 1 || recordIndex > fileLines.size()) {
        cout << "Invalid record number." << endl;
        return;
    }

    recordIndex--;

    cout << "Selected record: " << fileLines[recordIndex] << endl;

    InventoryItem newItem;

    cout << "Enter new description: ";
    cin.ignore();
    getline(cin, newItem.description);
    
    cout << "Enter new quantity: ";
    cin >> newItem.quantity;
    if (newItem.quantity < 0) {
        cout << "Invalid quantity." << endl;
        return;
    }

    cout << "Enter new wholesale cost: ";
    cin >> newItem.wholesaleCost;
    if (newItem.wholesaleCost < 0) {
        cout << "Invalid wholesale cost." << endl;
        return;
    }

    cout << "Enter new retail cost: ";
    cin >> newItem.retailCost;
    if (newItem.retailCost < 0) {
        cout << "Invalid retail cost." << endl;
        return;
    }

    cout << "Enter new date (MM-DD-YYYY): ";
    cin >> newItem.dateAdded;
    if (!validateDate(newItem.dateAdded)) {
        cout << "Invalid date format." << endl;
        return;
    }

    stringstream newRecord;
    newRecord << newItem.description << "|" << newItem.quantity << "|" << newItem.wholesaleCost << "|" << newItem.retailCost << "|" << newItem.dateAdded;
    fileLines[recordIndex] = newRecord.str();

    ofstream outFile(filename);
    if (!outFile.is_open()) {
        cout << "Error writing to file." << endl;
        return;
    }

    for (const string& updatedLine : fileLines) {
        outFile << updatedLine << endl;
    }

    outFile.close();
    cout << "Record updated successfully." << endl;

}


bool validateDate(const string& date) {

    // MM-DD-YYYY
    // 0123456789

    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {
        return false;
    }

    int month = stoi(date.substr(0, 2));
    int day = stoi(date.substr(3, 2));
    int year = stoi(date.substr(6, 4));

    const int yearCutoff = 2020;
    const int currentYear = 2025;

    bool isLeapYear = (year % 4 == 0);


    if (month < 1 || month > 12) {
        return false;
    }

    if (day < 1 || day > 31) {
        return false;
    }

    if (month == 2) {
        if (isLeapYear && day > 29) {
            return false;
        } else if (!isLeapYear && day > 28) {
            return false;
        }
    }

    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {
        return false;
    }

    if (year < yearCutoff || year > currentYear) { 
        return false;
    }
    
    return true;
    }
